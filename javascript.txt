=> Everything in javascripts happens inside an execution context.
=> Javascripts is synchronous single-threaded language.

=> Call stack maintains the order of execution of execution context.

=> In execution context there are two phase:
   (1) Memory Creation : 
       In M.C everthing store in Key, Value pair.
       in variable case it allocate some memory to that and assign undefind value to it,
       in function it store all the code as it.
   (2) Code Execution :
       In C.E execute the code and assign the value.

=>  Hoisting is a JavaScript mechanism where variables and function declarations are moved to the  top of their scope
    before the code is executed. This means that even if a variable or function is declared later in the code, it can 
    be used before its actual declaration.

=>  Temporal Dead Zone (TDZ) is a term used in the context of variable hoisting in JavaScript. When a variable is
    declared using the keyword 'let' or 'const' in JavaScript, it is not accessible until it has been declared and initialized. The TDZ is the period between the start of a block and the point where a variable is declared and initialized. During this period, any attempt to access the variable will result in a ReferenceError. The TDZ helps enforce the use of best coding practices and helps catch potential bugs before they can cause problems in your code.    

=>  In JavaScript, shadowing occurs when a variable in an inner scope has the same name as a variable in an outer
    scope. When this happens, the inner variable takes precedence over the outer variable, effectively "shadowing" it.  

=>  A closure is the combination of a function bundled together (enclosed) with references to its surrounding state
    (the lexical environment). In other words, a closure gives you access to an outer function's scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures
    eg:- 
        function x()
        {
            var a=10;
            function y(){
                console.log(a);
            }
            return y;
        }
        var z=x();
        console.log(z());
        here when we invoke z(),it call y function and find it local scope value of 'a'. then they don't find then also refrece store in the execution then it will check in parent lexical scope and here he find and print 10;
        they remember where it present. no longer x is exist still they remember the value of x.the function y remember the value of it's lexical scope.
        that is closure.

=>      function foo()
        {
            for(var i=1;i<=5;i++)
            {
                function close(i)
                {
                    setTimeout(()=>
                    {
                        console.log(i)
                    },1000)
                }
                close(i);                
            }
        }
        foo(); 

=>  Function statement & Function declaration:-
    function sayHello(name) 
    {
        console.log("Hello, " + name + "!");
    }  
    sayHello("Bob"); // logs "Hello, Bob!"  

=>  Function Expression:-
    const sayHello=(name)=>
    {
        console.log("Hello, " + name + "!");
    } 
    sayHello("Bob"); // logs "Hello, Bob!"

=>  Diffrence between Arrow function and Normal Function:-
    1. Synntax diffrence.
    2. Arguments objects are not allowed in arrow function.
    eg:- 
            // Normal Function
            function add(a,b)
            {
                console.log(arguments);
            }              
            add(10,20); 

            // Arrow function
            const add=(a,b)=>
            {
                console.log(arguments);
            }   
            add(10,20);

    3. constructor function are created by normal function, we can't create with arrow function:-
       eg:-
                //normal function
                function Car(name)
                {
                    this.brand=name;
                }
                const carData=new Car("maruti");
                console.log(carData);

    4. arrow function do not have thier own this:-
       Arrow functions in JavaScript do not have their own this binding. Instead, they inherit the this value from the surrounding lexical scope.
       eg:-        
            const obj = {
            name: 'John',
            age: 30,
            greet: function() {
                console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
            },
            greetArrow: () => {
                console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);
            }
            };

            obj.greet(); // output: "Hello, my name is John and I am 30 years old."
            obj.greetArrow(); // output: "Hello, my name is undefined and I am undefined years old." because 1st it's find in lexical scope that
            where is normal function then it's refer to that object. here they don't find function and refers to global object, that's why output
            is undefined.

            var name="MI"
            const obj=
            {
                name:"RCB",
                printName1:()=>
                {
                    console.log(this.name);
                }
            }
            obj.printName1();
            Here 1st they find their lexical function then refers to object but here is no any normal function so they refers to global.this so
            output is MI.

    5.  Implicity returned by the arrow function:-
        arrow function returned single expression but in traditional function we have to use return:-
        eg:-
            //traditional function
            function add(a+b)
            {
                return a+b;
            }         
            const ans=add(1,2);
            console.log(ans);

            // arrow function
            const add=(a,b)=>a+b;
            const ans=add(1,2);
            console.log(ans)

=>  Currying is a technique in functional programming where a function that takes multiple arguments is transformed into a series of functions that
    take one argument each. In JavaScript, currying is often used to create more specialized functions from more general ones.
    Here's an example of a curried function in JavaScript:     
    eg:-
        function add(a)
        {
            return function(b)
            {
                return a+b;
            }
        }
        const ans=add(5)(5);
        console.log(ans);     

        const myObj=
        {
            name:"sourabh",
            age:28
        }
        function findKey(obj)
        {
            return function(key)
            {
                return obj[key];
            }
        }
        const ans=findKey(myObj)('name')
        console.log(ans);

        function add(x,y)
        {
            console.log(x+y);
        }

        const added=add.bind(this,2);
        added(3);

=>  Pure functions are functions that accept an input and returns a value without modifying any outside data. and predectible output.
    bcoz everytime there is same output.
    let x=10;
    function add(x)
    {
        console.log(x+1);
    }        
    add(5);
    add(6)

=>  An impure function is a function that contains one or more side effects. It mutates data outside of its lexical scope and does
    not predictably produce the same output for the same input.  
    eg:-
        let count = 0;
        function increment() {
        count++;
        return count;
        }

        console.log(increment()); // Output: 1
        console.log(increment()); // Output: 2


            